vue-router --- sayfa yönlendirme

* vue create router
cd router
npm install vue-router -s
main.js e aşağıyı ekle
import VueRouter from 'vue-router'

Vue.use(VueRouter)

* CompA.vue ve CompB.vue iki comp yaptık, main.js de bunları import ve yönlendirme yapalım, main.js dosyası
    import Vue from 'vue'
    import App from './App.vue'
    import VueRouter from 'vue-router'

    import CompA from './components/CompA.vue'
    import CompB from './components/CompB.vue'

    Vue.config.productionTip = false
    Vue.use(VueRouter)

    const router = new VueRouter({
    routes : [
        {
        path : '/compa',
        component : CompA
        },
        {
        path : '/compb',
        component : CompB
        },
    ]
    })

    new Vue({
    router,
    render: h => h(App),
    }).$mount('#app')

App.vue da da
    <template>
        router çalışması
    <br>
    <router-link to="/compa">go to component A</router-link><br>
    <router-link to="/compb">go to component B</router-link><br>

    <hr>
    <router-view>

    </router-view>
    </template>
şeklinde hazırladık artık adres satırına compa eklediğimizde CompA.vue içeriği <router-view>.....</router-view> arasında görünür, aynı şekilde compb yazdığımızda da ... veya linkleride koydum koda <router-link to="compa">got to comp A</router-link>
linklerle de bu şekilde

* actif olan linki gösterebilmekiiçn style da 
     .router-link-active{
        color: crimson;
        background-color:orange;
    }

* bazı sayfalarda mesela compa/username:lksdlkajl
 vb kullanımlar olur, yani ayrı bir bilgi gider bunu yapmak için, ... mesela compa yanına id alsın path: '/compa/:id' olsun, bunu main.js de yani route ayarlarının olduğu yerde path in ne şekilde olacağnı belirttik App.vue ya gidip 
    <router-link :to="'/compa' + id">go to component A</router-link><br>
id verisini data dan alıyor

* veriyi yani id yi CompA.vue içinden yakalayalım, CompA.vue içine 
    {{ this.$route.params.id }}

burada hengi parametreler geliyor consolden bakalım, 
    <template>
        <div>
            comp A
            <br>
            <!-- {{ this.$route.params.id }} -->
            <button @click="logConsole">parametreleri göster</button>
        </div>
    </template>

    <script>
    export default {
        methods: {
            logConsole(){
                console.log(this.$route);
            }
        },
    }
    </script>

$route var olan route daki bilgilere ulaşmak için, normal route ise yönlendirme için

* main.js de path içine isimde tanımlayabilriz, 

* bazen bir url b,rden fala path ile eşleşebilir bu durumda eşleşme önce tanımlanan ile olur, 

* route a alt yollarda tanımlanabilir, bunlara children denir compB için yapalım, main.js de ... Alert.vue ve Detail.vue olarak iki comp yaptık, main.js de import yapalım, router da path leri ayarlayalım, sonrasında adres satırına alert yada detail yazdığımızda o sayfaları getirir, alt path şere '/' ile başlamadığımıza dikkat eğer öyşle yaparsak bunlar kök gibi(pernt gibi algılanır) problem,  yani children path a / koyma, 

* içiçe route da comp yeniden oluşturulmaz, yani life cycle lar tekrar çalışmaz, bu durumda değişiklikleri izlemek için, gidip gelinen yer object olarak görünür, hash id yi gösterir, meta html etiketi sayfayla ilgil bilgi vermek için vs. varsa onu gösterir, # ise bir id varsa onu işaret eder, query sorgu,  

* benzer bir controlu beforeRouteUpdate ile de yapabiliriz;

*App.vue ya gidelim, yönlendirme için kull. func. push ancak push farklı parametrelerde alır, koda bak, push yerine replace de kullanılır, push dan farkı replace ile yapılan yönlendirme tarayıcı geçmişimne kaydedilmez, 

* route kontrolleri componentler içinden old. gibi komponentler dışında dan olabilir, bunud a main.js de yapabiliriz,, main.js e bak

* yönlendirmelerde animasyonda kullanabiliriz, bunun için router-view ları transition tag ları arasına alır normal devam ederiz, 




     
