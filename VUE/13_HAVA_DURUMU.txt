hava durumu uygulaması api kullanımı olacak,
vue create hava-durumu
cd hava*
npm install -s vue-resource

* projeyi temizleyelim, 

* https://openweathermap.org/api adresindeki api yi kullanacağız, yani dışarıdan veri alacağız, bue-resource u o yüzden kurduk

* main.js e rosources i ekleyelim, 
    import Vue from 'vue'
    import App from './App.vue'
    import VueResource from 'vue-resource' 

    Vue.use(VueResource)
    Vue.config.productionTip = false

    new Vue({
    render: h => h(App),
    }).$mount('#app')

    ayrıca vue.config dopsyasıonı oluşturmalıyız, 
        module.export = {
    devServer : {
        proxy : 'https://samples.openweathermap.org/'
    }
}

buradaki peoxy apimizin verdiği adresin ilk kısmı, localde çalıştığımız adresi ise bu adresin olduğu yere yapıştıryoruz, CurrentData.vue da, 

* components > CurrentData.vue yapıp içine bir buton koyup, currentValue(h{...} hazırlayıp içine https://www.npmjs.com/package/vue-resource dan örnek kodu koyalım, get yapacağımız adres openweather daki city ye göre olan adres 
api.openweathermap.org/data/2.5/weather?id={city id}&appid={your api key} 

* burada ilk kritik nota vue.config.js dosyası ikinci kritik konu ise CurrentData.vue da api adresinin ilk kısmına localde çalıştığımız adresi girmemiz gerektiği (http://localhost:8080/data)

* problem olursa serverları dururup programı kapatıp tekkrar çalıştır, problem yoksa artık butona tıklayınca console a response.body nin geliyor olması lazım, artık içindeki bilgileri kullanabiliriz

* icon konsunda da bilgi veriyor, api dokümanında (https://openweathermap.org/weather-conditions) icon diye aratınca iconların ne olduğu nasıl kullanıcağı console da gelen icon kodlarının karşılıkları vb. bir çok bilgi geliyor, (http://openweathermap.org/img/wn/10d@2x.png) bu adreste örneğin bir icon adresi bunda ilgili kısmı değiştirerek iconların resimlerinide kullanabiliriz, (10d yazan kısım), response.body deki icon kodunu alıp... istediğimiz şey get weather dediğimizde hava durumuna ilişkin bilgileri çekip göstersin

* CurrentData.vue içinde bir array yapacağız ve bu array içindeki bilgilere göre dönecek ve verileri ona göre basacak, bu array weatherValues : [] bu array içini temelde response.body yani api dolduracak, CurrentData.vue içinde butona tıkladığımızda value adında bir nesneyi ekranda görünecek olan array in içine pushluyor ve bunlarıu deneme amaçlı sayfada görebiliyoruz, sorun yok


* şimdi bu verileri kullanarak ekrana belli bir formatta getirecek olan RowValue.vue componentini yapcağız. Bunun yapacağı temel şey gelen bilgileri row olarak ekrana yazması, 

*RowValue.vue templateini tamamladık, burada apideki örnek sayfada veriler nasıl ve neyin içinde ne konumda old. bakıp buna göre templateini hazırladık, buraya bu veriler props olarak gelecek geliş adını item dedik ve object olarak geleceğini belirttik, CurrentData.vue ya gidip RowValue.vue yu import edip, components listesine ekleyeceğiz, 

* CurrentData.vue da template e 
    <div v-if="loading">
      <RowValue :item="weatherValues[0]"/>
    </div>
kodunu yazdık, burada eğer loading true ise <RowValue/> göster diyoruz, loading i ise computed olarak hazırladık, eğer weatherValues boş değil ise yani içnde bilgi varsa o zaman loading true oluyor, yani ekrana gösterecek ayrıca RowValue da props olarak item ismi ile weatherValues[0] ı yolluyoruz, weatherVAlues[0] içeriğibir nesne bunun ilk elamnı date, ikincisi ise body bize body lazım old. için RowValue içinde body olarak adrese ekliyoruz gelen props u. Buna dikkat.

* RowValue.vue da template i birtablo şeklinde düzenleyelim, ilk yapacağımız şey artık biraz önce CurrentData.vue dan item props u olarak bil kısım gönderdiğimiz verinin tamamını yani weatherValues[] inin tamamını yollamak, ayroca array a push luyorduk veriyi resource da bunu unshift ile değiştirelim, yani yeni gelen data array ın sonuna değil başına eklensin, RowValue.vue da props olarak gelecek item artık object değil Array olacak, artık template e table girmeye başlayalım, table ayarlamaları sonrası style larıda düzenledik, sıkıntısız şekilde verileri alıp tabloya yerleştiriyor

* SomeValue.vue adında bir comp oluşturduk, vuex i projeye dahil edelim, npm i -s vuex
src > store > index.js oluştrduk ve main.js e de bunu ekleyelim, 

* index.js yi düzenlemeye devam, mutataions hazırlayalım, burada setWeatherValue(){...} buradan CurrentData.vue ya gidip unshify yaptığımız işlemi index.js ye alacağız, CurrentData da ise mutations daki setWeatherValue() yu çağıracağız; 
    this.$store.commit('setWeatherValue', value)
index.js de de 
    setWeatherValue(state, payload){
            state.weatherValues.unshift(payload)
        }
artık CurrentData.vue dan props item olarak bir şey yollamamıza gerek yok, template deki<RowValue/> yu itemsiz düzenleyeceğiz ve RowValue.vue ya gidip props kısmını kaldırmak ve template içinde v-for ile döndüğümüz kaynağı direkt state şekliden düzenlemek yani 
    <tr v-for="(i,index) in this.$store.state.weatherValues" :key="index">
şeklinde, denemesinde sıkıntı yok, normal çalışıyor.

* artık SomeValue.vue yu dolduralım, burada da yine api den dönen verilerden alacağız, burada da yapacağımız şey bir tablo old. için Rowvalue.vue daki tabloyu buraya kopyalayıp düzenleyelim, style kısmını da RowValue.vue dan alıp düzenleyelim, CurrentData.vue ya gidip SomeValue.vue import, components e ekleyip, template de tag ını yerleştirelim, ayrıca computed deki loading i de vuex e göre güncelleyelim, çünkü artık data da weatherValues yok, bu index.js de state olarak var, 

* şimdi bir başka API olan one call api kullanalım, örnek adres olarak api docs da 
    https://api.openweathermap.org/data/2.5/onecall?lat={lat}&lon={lon}&
exclude={part}&appid={YOUR API KEY}

https://www.latlong.net/place/istanbul-turkey-2242.html den istanbul verilerini alalım ve ares satırıbdaki ilgili yere yapıştıralım ve api key imizide ilgili yere yapıştıralım ee1077edbdc73b4a202dbac609f83794 yani adresimiz 
    https://api.openweathermap.org/data/2.5/onecall?lat=41.015137&lon=28.979530&%20exclude={part}&appid=ee1077edbdc73b4a202dbac609f83794
olacak buradanda bize istanbulun verileri geliyor, 

* HourlyWeather.vue olarak ayrı bir component yapalım, ve currentValue.vue daki methods u buraya da yapıştıralım, ve url yi yeni url mizle değiştirelim ve adresi localhost kısmınıda ayarlayalım (açıklaması yukarıda var), buradaki commit imiz farklı olacak, index.js ye gidip düzenleyelim, denememiz başarılı

* kalan kısımlarıda düzenlemeye devam edelim

* index.js de hourlyWeather : [] koyacağız ve mutations adres   setHourlyWeather(state, payload){
            state.hourlyWeather.unshift(payload)
        }
hazırlayacağız ve HourlyWeather.vue ya gidip store a veriyi commit ederken ki method ismini aşağıdaki şekilde düzenlememiz gerekiyor, 
    this.$store.commit('setHourlyWeather', value)

* RowValue.vue daki tablo yapısını da buraya koyalım içini düzenleyelim, aynı şekilde css leride alalım, şimdi deneme amaçlı olarakta bunu App.vue ya import edip kullanıp bakalım, 

* HourlyWeather.vue da v-for ile hourlyWeather stae inde dönerek istediğimi verileri alabiliriz, 
    <tr v-for="(i,index) in this.$store.state.hourlyWeather" :key="index">
        <td>{{ i.body.timezone }}</td>
        <td>{{ i.date }}</td>
        <td>{{ i.body.current.temp }}</td>
        <td>{{ new Date(i.body.hourly[0].dt * 1000) }}</td>
    </tr>
* şimdi başlık row unu da v-for ile dönelim, yalnız burada bu array in [0] indisinde döneceğiz ki  böylelikle saatelere göre hava scıcaklığını alalım, son hali
    <tr>
        <th v-for="(i,index) in this.$store.state.hourlyWeather[0].body.hourly" :key="index">{{ new Date(i.dt * 1000)}}</th>                  
            <!-- <th>date</th>
            <th>current</th>
            <th>hourly</th> -->
    </tr>
        <!-- <tr v-for="(i,index) in this.$store.state.hourlyWeather" :key="index">
        <td>{{ i.body.timezone }}</td>
        <td>{{ i.date }}</td>
        <td>{{ i.body.current.temp }}</td>
        <td>{{ new Date(i.body.hourly[0].dt * 1000) }}</td>
        </tr> -->
        <tr>
        <td v-for="(i,index) in this.$store.state.hourlyWeather[0].body.hourly" :key="index">{{ Math.round(i.temp - 273.15) + "c"}}</td>
        <!-- santigrad a çevirmek -->
    </tr>

* HourlyWeather.vue da api deki diğer bazı bilgileride çekerek bir tablo yaptık

* artık şehir seçiminide ekleyelim, seçilne şehre göre veri getirsin, yeni bir comp yapalım, multiData.vue, içine select menu koyup 4 şehir koyduk options da data da selectValue e ya istanbul atadık ve selectValue yu da template de v-*modele bağladık, yani seçilen şehre göre artık selectValue değeri değişecek,selectValue değişince o zaman lon ve lat değeride değişecek bunu da computed ile yapacağız, latLong(){...} hazırladık, daha sonra api url sinde lat ve long un olduğu kısmın değerinin computed den geleceğini ${this.latlong()} şeklinde belirttik, artık, burada index.js de mutations a göndermemiz lazım

* index.js de state olarak bu sefer multiCity : [] hazırlayacağız,
 setMultiCity(state, payload){
    state.multicity.unshift(payload)
}
şimdi App.vue da multiData.vue yu import edelim, css leri RowValue.vue dan aldık, table yapısını da aldık, methods un adını değiştirdik, commit edeceğimiz function un adını da değiştirdik. 
