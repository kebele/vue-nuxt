Vue.js ve Nuxt.js Rubicon Data Udemy Eğitimi Notları

Genel Kaynaklar

https://vuejs.org/v2/guide/
https://github.com/vuejs/awesome-vue
https://vuetifyjs.com/en/
https://medium.com/@_shirish/thinking-in-components-with-vue-js-a35b5af12df

kurulumlar

https://nodejs.org/en/ adresinden LTS versiyonu indirilip kurulacak
problem varsa ortam değişkenlerinden sıralama kontrol edilmeli, önce npm sonra nodejs olacak, 

vue cli yüklenecek https://cli.vuejs.org/ adresinde en güncel şekli, 
global yükleyelim, terminalden 
npm install -g @vue/cli

proje oluşturma
vue create hello-world

cd hello-world ile klasör içine girme
npm run serve ile de projeyi çalıştırma (bazen npm run dev) ???
vue bunu nasl yapılacağını söylüyor zaten

cdn
projeye dışarıdan eklenen özel amaçlı kütüphaneler, bootstrap gibi, bunlar vue projelerinden public altındaki index.html içinde head e eklenir, genellikle cdn ler npm yolumla da projeye eklenirler, bu yöntem daha yaygındır, 

webpack ve babel, webpack js tabanlı bir module bundler, js dosylarını paketler, bütün js dosyaları, resimler vs çeşitlerine göre toplar her çeşidi te bir dosya haline getirir. 

babes ecmascript6 yı es5 e çevirir, zaten vue cli da default gelir, 

vue cdn yardımıyla html, css, js üçlüsünde (CLI) kullanmadan da kullanılabilir ancak CLI kullanmak daha verimlidir, 

klasör yapısında node_modules > burada hazır gelen ve sonradan yükleyeceimiz moduller bulunur, public > paylaşılan dosyalar olur, ve anasayfanın html kısmı burada, src > assets içinde genelde resim dosyaları vs olur, components içinde uygulamada kullanılan componentler burada olur, main.js ana js dosyamızdır, package.json ise proje içindeki gerekli dosyalara ilişkin veriler tururlur, proje kurulacağında taşınacağında vs. buradaki dependencies e göre kurulur, kurulum ve çalıştırmaya ilişkin konutlar, script ler olur, projeye bir paket eklediğimizde buraya o paketle ilgili veriler gelir. 

string interpolations = mustache int. = <p>{{ value }}</p>
bunun çıktısı 'mesela' olur

export default {
    data(){
        return {
            value : "mesela",
        }
    } 
}

directives
v- ile başlayan ve html yi manipule eden  özel ifadeler
v-bind  

<input v-bind:placeholder="inputHolder">

data(){
    return {
        inputHolder : "şehri gir"
    }
}

v-bind ile inputHolder ile data daki inputHolder birbirine bağladık.

v-for   
v-on
v-once
v-html
v-slot
v-if
v-else
v-model 
v-show
v-text
v-pre 
v-cloak

argümanlar ise directive lerden sonra gelen ifadeler

<h4 style="color:red">v-bind / v-on</h4>
      <p>v-bind : datadaki bir değere bağlamak için</p>

      <p>
        v-on : bir function çalıştırmak için mesela aşağıda inputta bir
        değişiklik olup bittiğinde changeInput func. çalıştırır, maxLength
        olarak MaxValue değerini bağladık, 5 taneden fazla karakter girilmesine
        izin vermez $event ile değeride alırız, koda bak
      </p>

<h4 style="color:red">v-if / v-else / v-show</h4>
      <p>
        v-if : data da see tanımladık, true değerini verdik, değeri false a
        çevirirsek buton görünmez
      </p>
      <p>
        v-else : bir yere v-if koyduysak v-if false old. v-else koyduğumuz
        çalışır, terside aynı şekilde, v-else-if de kullanılabilir
      </p>
      <p>
        v-show : v-if ile aynı şekilde çalışır, tryOne computed de, kodları
        inceleme computed e bak
      </p>
      <p>
        v-show da elementler her zaman dom un üzerindedir, display : none gibi
        calışır, v-if de ise her seferinde dom a eklenir ve kaldırılır, bir
        bilgi olaral v-for ve v-if beraber kullanılmaz, beraber kullanılacaksa
        v-for v-if in dışına yazılır
      </p>

    <h4 style="color:red">v-for</h4>
      <p>v-for : döngü açıklama kodun içinde</p>

     <h4 style="color:red">v-model</h4>
      <p>
        v-model : çift yönlü data iletişimi, aynı anda veriyi hem iki taraflı
        yollar hemde görüntüler, v-model normalde hemen tepki verir,
        v-model.lazy="xyz" de lazy yazılanın/girilenin bitmesini bekler sonra
        tepki verir, v-model de yazılan herşey string olarak algılanır,
        v-model.number="xyz" yazılanı number olarak algılar, v-model.lazy.number
        şeklinde de kullanlabilir, v-model.trim ise girilen verideki boşlukları
        siler
      </p>

      <h4 style="color:red">v-once</h4>
      <p>
        templatedeki elemente v-once eklediğimizde o element her tıklama ile
        değişir ancak ekran değişmez
      </p>

     <h4 style="color:red">v-html</h4>
      <p>
        directive in içinde html yazmak istersek bunu kullanırız, p içerisinde
        v-html="vue" şeklinde kullanırsak html şeklinde basar
      </p>

        <h4 style="color:red">v-pre</h4>
      <p>
        eğer süslü parantezli şekilde görünsün hata gelmesin şeklinde istiyorsak
        directive v-pre ekleriz, çok kullanılmaz
      </p>

      <h4 style="color:red">v-cloak</h4>
      <p>
        diyelim bu div içindeki herşeyiyle beraber derleme bitene kadar görünmez
        hal getirir, mesela bir sayfadaki resim parça parça yükleniyor yada
        yazı, div içine v-cloak yazarsak parçalı yükleme olmaz, hepsi bitince
        son hali olan sayfa gelir
      </p>

      <h4 style="color:red">mustache ve js ifadeleri</h4>
      <p>
        mustache içinde arimetik işlemler, ternary operator, kullanılabilir, tek
        satırlık ifadeler olmalı, ayrıca burada değişken tanımlanmaz
      </p>

      <h4 style="color:red">v-bind / v-on kısa halleri</h4>
      <p>v-bind:placeholder = :placeholder = :[placeholder]</p>
      <p>v-on:click = @click = @[some attributes]</p>

       <h4 style="color:red">mustaches ve diziler</h4>
      <p>
        A ve B arrayleri oluşturduk, changeArray(){} hazırladık, bunu da bir
        butona bağladık, her tıklamada changeArray() çalışacak,
      </p>

       <h4 style="color:red">listeleri görüntülemek ve dizi ifadeleri</h4>
      <p>items2 isimli data da bir array imiz var onu aşağıya v-for ile aldık, şimdi dinamik veri ekleyelim, </p>

        <h4 style="color:red">custom directive oluşturmak</h4>
      <p>vue da kendi directive lerimizide yazabiliriz, aşağıda span kullandık v-colorChanger olarak hazırladığımız directive ile beraber, bu directive ile kullanılan elementin arkaplan rengi yeşil olacak görevi bu, binding ekledik işleme,  border koyalım mesela, attribute yollayalım birde, ayrıca directive ler main.js de de tanımlanabilir, bu şekidle yapıldığında global olur, main.js e bak</p>

Computed ve methods 

computed bir kere çalışır, eğer onu etkileyen bir şey yoksa çalışmaz, method ise her çagrıldığında çalışır, 

computed ve watch
computed sync çalışır, basit yerlerde kullanılır, 
watch async çalışır, maliyetli, perf isteyen yerlerde kullanılır, watch temelde bir değişkeni isler değiştiğinde ona tepki verir,

computed oluşturalım, reverseMsg
basit hesaplamalar, her seferinde çalışmasına gerek olmayan func. için computed kullanak aperf açısından çok daha iyidir, 

watch ile ornek yapalım, termometre çevirisi yapalım, celcius cel, fahrenheit fah ve kelvin için kel i dataya tanımlayalım, watch her bir değişken değiştiğinde çalışır, watch içine yazdığımız cel, fah ve kel data da tanımlı, bu watch içindeki func. bunlara bağlı dolayısıyla bunlardaki değişiklik yani herhengibir inputa girdiğimiz değer değiştiğinde watch bunları izleidği için hemen değiştiryor

stillendirme
dinamik ve static olarak iki tür, sttic olan her durumda aynı olanstillendirme, dinamik ise dışarıdan gelen bir şeylere bağlı olarak değişendir





















