rol model uygulaması, bootstrap vue ile

* https://bootstrap-vue.org/docs, getting started daki (vue cli 3 olanı daha güzel, bununla main.js ayarlarını vs de kendisi yapıyor) yönerge ile bootstrap-vue yu projeye ekleyelim, template projeyi temizleyelim, 

*  https://bootstrap-vue.org adresinden herhangibir componenti alıp ekleyelim, mesela modal alalım, problem yok, projeye geçelim

* ana çerçeve olacak olan layout koyalım, componentleri oluşturalım, AddRoleModel.vue verileri gireceğimiz component, tasarımını yaptık, datadaki değişkenlerini bağlantılarını vs.

* ModelCard.vue da oluşacak kart compu bunuda bootstrapvue dan card olarak aldık,

*bu7 componentleri tek tek import etmektense globalComponents.js ye import edip oradan export default {x,y,z} dağıtalım, bunları kullancağımız yerde mesela App.vue da import edeceğimiz şey globalComponents.js dosyası ve components içine de 
...globalComponents, diyeceğiz

* App.vue da ModelCard ı da ilgili old. yere koyalım, ModelCard.vue da görünümü tamamalayalım

* AddRoleModel içindeki sendRoleModel(){} i düzenleyelim
    sendRoleModel(){        
        const a = [this.modelName, this.modelJob, this.modelNationality, this.modelBirthday, this.modelAbout, this.modelPic, this.tags]

        //a yı aşağıdaki şekilde emitleyelim, yani yayalım, bunu App.vue da <AddRoleModel /> de yakalayacağız
        // <AddRoleModel @fromAddRoleModel="updateCard($event)"/>

        this.$emit("fromAddRoleModel", a)
      }

şimdi bunu App.vue dan yakalayalım, template de comp içinde 
    <AddRoleModel @fromAddRoleModel="updateCard($event)"/>
script içinde data da card:[] oluşturalım ve methods da da updateCard(){} hazırlayalım
    updateCard(e){
      this.card.push(e);
      console.log(this.card)
    }
problem yok, hepsini aldık, şimdi bu aldıklarımızla modelCard yapacağız, card:[] içindeki elemenlar kadar modelCard döneceğiz, 
    <ModelCard
            v-for="item in card"
            :key="item"
            :index="index
            :modelName="item[0]"
            :modelJob="item[1]"
            :modelNationality="item[2]"
            :modelBirthday="item[3]"
            :modelAbout="item[4]"
            :modelPic="item[5]"
            :tags="item[6]"
          />
şeklinde hazırladık, card array i içini alıyoruz ve ModelCard compuna gönderiyoruz şimdi bunu props olarak modelCard içinden alacağız

* ModelCard.vue içinde
    props: {
      modelName : String,
      modelJob : String,
      modelNationality : String,
      modelBirthday : String,
      modelAbout : String,
      modelPic : String,
      tags : Array
  },

  ekledik böylelikle template kısmında {{modelName}} şeklinde bunları (yani App.vue dan gelen bilgileri) geçirebileceğiz, 

* * * * * * ÖZETLERSEK * * * * * * 
  * özetlersek yaptığımız şey, App.vue da template de sol kısımda AddRoleModel.vue çalışıyor bu bir input form, forma ver girdikçe bunlar bu comp un data kısmında bilgileri dolduruyor, 
  sonra bul bilgileri butona bağladığımız sendRoleModel(){} methodu ile bir array halinde (a = [] a adında bir array) $emit liyoruz, emitlerken verdiğimiz isim fromAddRoleModel
    this.$emit("fromAddRoleModel", a)
şimdi biz butona basarak bu array i emitledik yaydık yani, bu verileri App.vue içindeki 
    <AddRoleModel @fromAddRoleModel="updateCard($event)" /> 
şeklinde @fromAddRoleModel="updateCard($event)" 
şeklinde yakalıyoruz, burada da yakaladığımız verileri updateCard($event) methoduna yolluyoruz, bu methodun yaptığıu şeyde data da card:[] diye tanıladığımız array e bu gelen verileri push lamak, artık verilerimiz card [] i içinde ve modelCard compu içnde kullanılabilir durumda bunları v-for ile card array ı ile ilşkilendirdik ve içeriklerini bind ettik, artık ModelCard.vue da kullanabilir durumda, şimdi ModelCard.vue ya gidip bunları props olarak almalıyız,
    props: {
      modelName : String,
      modelJob : String,
      modelNationality : String,
      modelBirthday : String,
      modelAbout : String,
      modelPic : String,
      tags : Array,
      index : Number
  },

  artık template de kulalnabiliriz,
  * * * * * OLAY BU * * * * * 

* style ile biraz daha uğraşalım, 

* iki buton koyduk, update ve delete, bunlara tıklayınca olacakları ayarlayalım, update ile başlayakım, istediğimiz update a tıklayınca düzenleme yapabileceğimiz bir modal açılsın, bunun için yeni bir component yapacağız UpdateModelCard.vue ve bunun içine bootstrapvue dan modal componentini yapıştıracağız

* istediğimiz şey component DOM a eklendikten sonra showModal(){} çalışsın istiyoruz, bunun için mounted(){..} kullanacağız
    mounted() {
        this.showModal()
    },

* globalComponents.js e import edelim, artık extradan App.vue ya import ettmemize gerek yok, direkt kullanabiliriz, şimdi ModelCard.vue da update butonuna basıldığında bir emit fırlatalım, 
    updateEmit(){
          this.$emit("updateEmitIndex", this.index)
      }
App.vue dan bunu @updateEmitIndex olarak template içinde <ModelCard @updateEmitIndex="activeIndex = $event"/> içinde yakalayacağız, burada yakaladığımız index'i activeIndex diye methods da  tanımladığımız func a parametre olarak yolluyoruz, 

* AddRoleModel.vue i içindeki inputları UpdateModelCard içine taşıyalım, update ederken değiştirebilmek için daha sonra da bunları card arrayindeki bilgilree bağlayacağız, bunun için App.vue dan ModfelCard.vue ya props olarak yollanan verilere ihtiyacımız var bunların aynısını UpdateModelCard içinde alıp burada template e bind edeceğiz, şimdi bunu yapabilmemiz için App.vue daki değerleri alabilmemiz için activeNumber = -1 diye bir eğer tanımlayacağız bunuda activeIndex(){..} içinde e ye eşitleyeceğiz, 
    activeIndex(e){
      this.showModel = true;
      this.activeNumber = e
      console.log(e)
    }
burada yaptığımız şey, tıkladığımız kartın card[ arrayindeki ait olduğu index i çekmek bu index e göre diğer bilgilerini çekebileceğiz çünkü, , activeNUmber ı -1 almamızın sebebi eğer array boş ise onun index i -1 olur, App.vue da <UpdateModelCard /> içine bir üstteki <ModelCard/> içinde yaptığımız gibi verileri içine koyacağız, burada farklı olarak bir üstte v-for ile döndüğümüzde item ları yazdırırken burada herhangibir v-for olmadığından sadece active kartın index i lazım old. onu da aşağıda methoddan aldığımızdan ve data da activeNumber a eşitlediğimizden burada item ifadesi yerine card[activeNumber] ifadesi koyacağız, klasir array deki bir ememanı gösterme notasyonu, 
    <UpdateModelCard 
            :modelName="card[activeNumber][0]"
            :modelJob="card[activeNumber][1]"
            :modelNationality="card[activeNumber][2]"
            :modelBirthday="card[activeNumber][3]"
            :modelAbout="card[activeNumber][4]"
            :modelPic="card[activeNumber][5]"
            :tags="card[activeNumber][6]" v-if="showModel"/>
yani card array ine git activeNUmber ıncı elamna git ve onun [x] indisini buraya bağla, denemeyi yapalım, formu dolsurup gönderdiğimizde card update e tıkladığımzda büytün bilgileri çeerek geliyor, sıkıntı yok, uypdate formunu kapattıoğoımızad a bu sefer yebğden tıkladığumızda bu sefer açılmıyor bunu çözmeemis lazım, bunu için UpdateMOdel Card.vue ya gidip toggleModal(){..} içine bir emit yazalım, 
    toggleModal() {
      // We pass the ID of the button that we want to return focus to
      // when the modal has hidden
      this.$refs["my-modal"].toggle("#toggle-btn");
      this.$emit("closeModel")
    },
şimdi bunu App.vue da comp içinden yakalayalım, comp içinde @closeModel="updateOkey()" şeklinde bu emit old. updateOkey(){..} çalıştısın, 
    updateOkey(){
      this.showModel = false
      this.activeNumber = -1
    }
yani tam toggle yapacak, modeli görünmez yapacak ve activeNumber ı tıklanmadan önceki değere çekecek.Bunu toggle tuışuna yapmıştık, buna dikkat, close tuşuna ihtiyacımız olmadığından kaldırdık, toggle a da update role model diyelim

* şimdi sırada update eklranı geldiğinde yapılan değişiklikleri emit ile kaydetmeye geldi,burada da daha önce yaptığımız gibi a yı tanımlayıp yollayalım, closeModel içinde a olarak yollayalım, bunu App.vue da yakalayan methodumuz updateOkey di bunu template içinde yakalarken parametre olarak kullanacağımızdan 
    @closeModel="updateOkey($event)"/>
şeklinde alacağız ve 
    updateOkey(e){
      this.card.splice(activeNumber,1,e)
      this.showModel = false
      this.activeNumber = -1
    }
şeklinde olacak, a olarak UpdateMOdelCard dan emitlediğimiz veriyi burada yakaladık ve this.card.splice(activeNumber,1,e) şeklinde yani activeNUmber indisli elemandan itibaren 1 tane sil yani knedisini sil ve yerine gelen e yi koy diyoruz,





* 

