Components

* bir compu projeye ekleyeceğimizde onun export edilmesi, kullanacağımız comp içine de import edilmesi ve yine kullanacağımız yerde components : {}e eklenmesi gerekli

    <template>
  <div>
    <HelloWorld /> 
  </div>
</template>

<script>
import HelloWorld from './components/HelloWorld'
export default {
  data() {
    return {};
  },
  components : {
    HelloWorld
  }
};
</script>

<style></style>

* comp a veri yollama, Post.vue hazırladık, buna App.vue'dan content isimli bir veri yollayalım, App.vue da 
    <Post content="real madrid"></Post>
Post compuna content key i ile real madrid verisini yolluyoruz, bunu Post.vue dan almak için
    script içine props : { content }
yaptık yani content adında bir props buraya gelecek, sonrada template içinde bu veriyi nerede kullanacaksak oraya {{ content }} yazıyoruz.

*addNewContent(){
    this.content.push({number : 5, content : 'five'})
}
methods a ekledik ve template e bir buton koyup buonada bu func u ekledik, 
butona bastıkça object pushluyor

* şimdi Post compun kendisini v-for ile dönelim; App.vue da 
    <post v-for="(item,index) in content" :key="index" :item="item"></post>
post comp içine :item="item" şeklinde veri göndereceğimizi söyledik,
Post.vue içine props içine item : Object belirttik, buraya item adında bir veri gelecek bunun türü Object dedik ve template i de
    <h2>{{ item.number }}</h2>
    <h2>{{ item.content }}</h2>
şeklinde hazırladık, sıkıntısız çalışıyor, 

* birde html gönderelim, dataya value adında bir html tanımlayalım
    value : '<h3>Value</h3>
    template de compu aşağıdaki gibi düzenleyelim
    <post v-for="(item,index) in content" :key="index" :item="item" :value="value"></post>
Post.vue da da props dan value yu karşılayalım ve template ine yazdıralım, 
    <div v-html="value"></div>
problem yok

* şu anda kadar veri göndermeyi parent to child şeklinde yaptık, bunu props ile yaptık, şimdi $emit ile child to parent veri yollayalım, ProductPage.vue oluşturalım, yapacağımız şey child içindeki inputa bir şey yazıldığında bunun ana comp içindeki spanda ekrana yazdırılması, 

ProductPage.vue (child) template
    <input type="text" v-model="inputValue" @keyup="sendData">
v-model="inputValue" data da inputValue siimli bir değ. oluşturduk bunuda v-model ile inputa bağladık, inputtaki değer buna atanacak
@keyup klavyeye her basıldığında sendData isimli func çalışacak, 
    sendData(){
            this.$emit('sendToData',this.inputValue)
    }
bu func ise inputValue değerini sendToData key i ile birlikte dış alemlere emitleyecek

şimdi App.vue ya gelelim, burada ProductPage i import edeceğiz, artık buu comp olarak kullanabiliriz ve bundna emitlenenleri de doğal olarak alabiliriz, 
template kısmı
    <ProductPage @sendToData="sendTo = $event"></ProductPage>
    <span>{{ sendTo }}</span>
ProductPage comp içinde sendToData key i ile emitlenmiş veriyi $event olarak aldık ve bunu data da tanımladığımız sendTo ya atadık ve şimdi de emitlenmiş olan veriyi $event olarak buna atadık. Sonrada sendTo yu span içine yazdırdık

* cardValue adında bir array oluşturalım, bunun içinde 4 eleman var, productPage.vue da bir buton yapalım, bu botun her tıklamada cardValue[]'a bir eleman eklesin, App.vue dan productPage.vue ya props olarak bir product gelecek, bu product ı addToCard(){} updatevalue key i ile emitleyecek, App.vue dan da bunu @updateValue="updateMainComponent($event) olarak aldık ve updateMainComponent adında bir func oluşturduk, buraaya veri geldiğinde bu func çalışacak ve product larak ProductPage.vue ya gönderdiğimiz oradan prosp ile aldığımız ve tekrar oradan bize bu func içingelen veriyi array imize pushlayan func. çalışacak, $emit alt func dan veri üste göbderilir, üsttende $event ile alınır ve kullanılır

* callback func ile veri gönderimi; bu da child to parent, productPage e bir input, 
    <input type="text" v-model="message" @keyup.space="keyFunc">
message e bağladık ve tuşa basıldığında değil space (veya entr veya başka bir tuşda olabilir) tuşuna basıldığında keyFunc u çalıştıracak, props olarak message alacak, ayrıca burada bize prop olarak bir func da gelecek, 
keyFunc(){
            this.myCallbackFunction(this.message)
        }
her tuşa bastığımızda bu çalışacak, bu App.vue dan prop olarak gelen myCallbackFunc ı çalıştıracak ve yine App.vue dan gelen message ı buna parametre olarak verecek, şimdi App.vue ya gidelim, 

* event bus kullanımı, child to child, yukarıdakiler ya chilt to parent veya parent to child dı,
önce main.js de 
    export const eventBus = new Vue();
yeni bir vue açalım, iki tane yeni comp yapalım, Big.vue ve Small.vue
Big den Small a veri yollayalım, iki compu dahazılayalım ve Big.vue ya main.js de hazırladığımız eventBus ı buraya import edelim, 
    import { eventBus } from '../main'
burada { eventBus } şeklinde yazmamızın sebebi bütün main.js i değil sadece eventBus ı import ediyoruz, inputa ve data arasına v-model ile title ilşikisini kuralım ve keyup ile her basıldığında eventBusFunc çalışacak, bunu methos da hazılayalım, 
    eventBusFunc(){
        eventBus.$emit("fromBig", this.title)
    }
fromBig key i ile eventBus a title bilgisini gönderiyoruz, şimdi gidip Small.vue da bunu yakalayalım, Small.vue da  <template>
  
    <span>{{ message }}</span>

<script>
import { eventBus } from "../main";

export default {
  data() {
    return {
      message: ""
    };
  },
  created() {
    eventBus.$on("fromBig", title => {
      this.message = title;
    });
  }
};
eventBus.$on ile alıyoruz, burada aldığımız veriyi bir func içinde kullandığımza dikkat, şimdi App.vue ya gidip iki comp uda import ve components nesnesine ekleyelim, deneyelim sıkıntı yok, eventBus basit uygulamalarda makul ancak proje büyüdükçe ortalık karışacaktır

* slot ile veri iletimi, Try.vue adında bir comp oluşturalım, sonrada bunu App.vue içinde import ve components e ekleyelim, şimdi Try.vue içine <slot/> ekleyeceğiz, şimdi App.vue da <Try>xyz</Try> arasına ne ytazarsak bu Try.vue da <slot/> olan yere o yazacak, burada meseka xyz yazdık, slot içinde sadece text değil html de gönderebiliriz, App.vue daki kullanıma dikkat, data(){} daki vs.html kodunu data içinde tanımladığımız değişkenin value su olarak hazırladık, template deki kullanım ise ,
    <Try v-html="slotValue"></Try>
şeklinde

* dinamik component kullanımın; 3 tane component oluşturulalım, sonrada import ve components ekleyelim, eklerken bunlara birde isim verelim, first, second, third şekliden artık bunları <first></first> şekilnde kullanabiliriz, yapacağımız şey bir buton ekleyip bununla bu 3 elementin sırayla dönmesi, bunun için daat nın içinde currentTab : 'first' şeklinde ve tabs : [] oluşturalım, tanplate e de v-for ile...
    
    <button v-for="tab in tabs" :key="tab" @click="currentTab = tab">{{ tab }}</button>
    <component :is="currentTab"></component>
<component></component> kullanımına dikkat :is="" kullanımı özellikle

*  componentlerin global olarak kayıt edilmesi; her seferiğnde kullanacağımız componentlerti kullanacağımız yerde import etmek components nesnesine eklemek vs vakit alan bir şey bunun için components içine globalComponents.js dosyası açarız ve buraya One, Two, Three yi (mesela) import edelim, 
    globalComponents.js içi 
        import One from './One.vue'
        import Two from './Two.vue'
        import Three from './Three.vue'

    export default {
        "first" : One,
        "second" : Two,
        "third" : Three,
    }

bunu App.vue da kullanmak için bunların importlarını kaldırıp bunun yerine globalComponents i import edeceğiz ve 
components : {
    ...globalComponents
}

diyeceğiz, bir yöntem daha va r bunda da main.js içine componenti normal kaydedeceğiz, One.vue yu bu şekilde yapalım, main.js içine ;
    import One from './components/One';
    
    Vue.component('first', One)

    problem yok, en güzel kullanım globalComponents.js kullanımı çünkü hepsi bir arada liste şeklinde bulunuyor, yönetmek çok daha kolay, 

    * props larda veri akışı;  










