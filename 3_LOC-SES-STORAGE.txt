local storage - session storage - cookies

* şimdiye kadar refresh de veriler siiniyor, bunu engellemek için ya bir db ye kayıt veya tarayıcının içine kayıt, tarayıcnın içine kayıtta; 3 metod var, local storage, session storage, cookies, local 5-10mb boyutlu, manuel veya js ile silmedikçe kayıt aldında, session 5mb boyutlu tarayıcı açık kaldıkça silinmez kapatılınca silinir, cookie ise tab kapatıldığında veya ayarlama nasılsa o zaman diliminde silnir, 4kb lik çok küçük alanı var,

* bunlar tarayıcı da application sekmesinde görülür, 

* burada bir input, bir buton ile inputtan gelen veriyi local storage (ls) ye kaydedelim

* data da value ve newValue tanımladık, inputu v-model ile value ya bağladık, butonuda saveValue methoduna bağladık, butona tıkladığımızda inputtan aldığı value değerini ls ye input-value key i ile kaydedecek ve inputu boşaltacak

* dataya koymuş old. newValue yu bir spana verdik, mounted life cycle methodunu hazırladık buna göre component mount old. ls de input-value key i varsa onun değerini alıp newValue ya atayacak ve böylelikle span içinde newValue değeri görünecek...

* session storage da aynı şekilde kodda local yazan yerlere session yazdığımızda bu sefer session storage olur

* silme için bir butona removeLocalData ekledik ve methodunda localStorage.removeItem('input-value'); dedik, yani sadece key i gönderdik, butona tıklandığında ls den o key ve değeri silinir, ls deki herşeyi silmek için ise localStorage.clear() kullanılır, 

* ls ye sadece string veri kaydedilir, ancak stringfy ile karmaşık verilerde stringe çevrilip ls ye kaydedilebilir, dataya foo : { name : 'vue', age : 34}, tanımladık, save butonua bastığımızda bu sefer localStorage.setItem('input-value', JSON.stringify(this.foo)); çalışacak, (önceki kodları yoruma aldım), birde bunu object olarak geri getirelim bunun için parse komutu kullanılır; this.newValue = JSON.parse(localStorage.getItem('input-value')) şeklinde key değeri verilerek geri getirilir, 

* ls ye direk kayıt yaptık bu bir güvenlik problemi oluşturabilir, bunun için kullanabileceğimiz bir kütüphane var crypto.js; https://www.npmjs.com/package/crypto-js adresinde gerekli bilgi var kurulumu;  npm install crypto-js 

* yeni bir App.vue yapalım, eskisini App1.vue şeklinde tutalım, yukarıdaki adresten kullanımına bakabiliriz, methods daki kullanıma dikkat, 

* Cookies, bcrypt, jsonWebToken konuları;  cookie (çerez) bir web sayfası ziyaret edildiğinde tarayıcıdaki kullanıcı bilgilerinin depolandığı küçük dosyalar, kullanıcıları takip etmek, sayfadaki davranışlarını izlemek ve ona göre içerik sunmak, e ticaret sitelerinde vs kullanılır, cookies ler application sekmesinde olur, App.vue yapalım, (crypto olanıApp2.vue olarak saklayıp), vue cookies kütüphansi https://www.npmjs.com/package/vue-cookies, bunu ekleyelim npm install vue-cookies --save kurulum sonrası main.js e kod ekleyeceğiz, 
    import VueCookies from 'vue-cookies'
    Vue.use(VueCookies)

* kullanımına npm sayfasından bakacağız, kaydederken, silerken vs. nasıl yapacağımız, inputtan gelecek elemanı cookie olarak kaydedelim, gerekli açıklamalar codun içinde de var, cookie kayıt için
    this.$cookies.set("token",this.userName,"30MIN")
cookie silmek için
    this.$cookies.remove("token");
buda aynı şekilde başka bir buton ve method ile yaptık

* çoğu zaman token ı geldiği şekilde kaydetmeyiz bunu şifreleriz,  bunun içinde bazı kütüphaneler var bcrypt bunlardan biri, https://www.npmjs.com/package/bcryptjs genellikle parola saklamak için, npm install bcryptjs ile kurulur, App.vue ya import edelim, daha sonra bcryptToken(){...} şeklinde methodumuzu hazırlayacağız, 
