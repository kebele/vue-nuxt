nuxt router

* nuxt ın otomatik bir router yapısı var, pages > index.vue ya bakalım, nuxt da pages a bir sayfa eklediğimizde bunu route yapısına kendisi ekler, bir sayfa ekleyelim, deneme.vue 
    <template>
      <div class="container">
        bu bir deneme sayfası
      </div>
    </template>

kayıt sonrası adres satırına http://localhost:3000/deneme yazmamızla bu sayfaya gideriz, main.js ile path ayarlamakla vs ugraşmayız, direkt router a ekler, bu path ekleme vs yi nuxt kendisi nuxt klasörü altında router.js içinde path ayarlamaları vs kendisi yaptı, 

burada klasörlemede yapabiliriz ve klasör içine başka sayfada koyabiliriz, nuxt bunuda anlar ve route ayarlamlarını yapar, http://localhost:3000/alt_klasor yaptığımızda alt_klasor içindeki index.vue çalışır, 
http://localhost:3000/alt_klasor/alt_klasor_2 burasıda sıkıntısız çalışır, dinamik yapıda yapabiliriz, bunun anlamı mesela olmayan bir adres yazdık diyelim veya olmayan bir istek gelsi bu durumda belli bir sayfaya yönlenmesini isteyebiliriz, bunun için sayfa adını _varsayilan.vue sayfası oluşturduk, adres satırına olmayan bir sayfa yazalım http://localhost:3000/alt_klasor/alt_klasor_2X bu istek cevabı adres satırı değişmeden bizi _varsayilan.vue ya götürür, 

* şimdi mesela http://localhost:3000/alt_klasor/888 yazdık bu durumda _id.vue görünür çünkü 888 diye bir sayfamız yok, 
eğer http://localhost:3000/alt_klasor yaparsak bu durumda da alt_klasor içindeki index.vue görünür,  

* içiçe route lar ve isimlendirme; şimdi klasör yapısında şöyle bir şey yaptık, alt_klasor adında bir folder yapmıştık içinde sayfalar vardı, şimdi birde pages ın altına alt_klasor.vue yaptık ve içine 
    <template>
      <div class="container">
        bu bir deneme sayfası
        <nuxt-child />
      </div>
    </template>
<nuxt-child/> koyduk bu önemli bu şekilde önce alt_klasor.vue çalışacak ve bunun altına bunun child ları var onlar çalışacak, mantık önemli, bu şekilde nested (içiçe) rouutes yapmış olduk, bunu route.js dende görebilir ne şekilde route ları ayarladığını, 

* bunun yanında <nuxt-child keep-alive/> keep alive uygulayabiliriz, artık her değişme, geçişte componentler silinmeyecek, buna props da gönderebiliriz,
    <nuxt-child kep-alive-props="{exclude:'modal'}"
şeklinde

ayrıca <nuxt-child name="inner"/> şeklinde yapıp inner için başka bir compoent gösterebiliriz, bunu yapmak için router.js e gidip ilgili path de (burada alt_klasor) component içine 
    component: {
        default : _00dedeec,
        inner : xyz_abc,
      },
    yapabiliriz, bu durumda ilgili sayfada iki ayrı comp aynı anda da görünür, yazma tarzına dikkat, 
    bir konuda folder lara dinamiklik verilebilir ancak vue dokumantasyonunda bu pek tavsiye edilemez

* sayfe geçişleri esnasında gönderilen parametreleri nasıl yakalayacağız? _id.vue ya gönderdiğimiz parametreyi yakalayalım, buton > showParams methodunu bağlayalım, method aşağıdaki gibi olacak, parametreyide aşağıdaki ile yakalıyoruz

methods: {
    showParams(){
      console.log(this.$route.params.id)
    }
  },

bu sayfa varsayılan bir sayfa yani adres satırınde ne girersek girlim alt_klasor altında bu sayfa gelecek mesela http://localhost:3000/alt_klasor/xxyzas girdiğimizde bizim yolladığımız parametre xxyzas dir bunuda butona tıkladığımızda console dan alırız. Bunu alabildiğimize göre çeşitli şekiller kullanabiliriz mesela parametreleri kontrol edebiliriz, validasyonda kullanabiliriz, burada bir özellik olarak validate({...}) kullanalım, mesela buradaki validate imiz parametre sadece number olsun, buna göre regex kodunu validate özelliği ile kullanalım, 
     validate({params}){
    return /^\d+$/.test(params.id)
  }
adres satırından mesela xyz parametresi yollarsak bizi hata sayfasına yollar eğer hata sayfası yoksa console da 404 gelir, parametre olarak 123 yollarsak bu sefer normal varsayılan sayfasına yollar, benzer bir validate işlemini nuxt.config.js de de yapabiliriz

* sayfa geçişlerine animasyon verme, assets > main.css daha sonra bu css dosyasını nuxt.config.js de bu ana css dosyası olarak tanımlıyoruz, 
     css: [
    '~/assets/main.css'
  ],
bundna sonra main.css de normal vue da anmasyon da kullanılan kodlarımızı kullanabiliriz, default olarak sayfa işaretçisi .page dir, 
<nuxt-link to="/deneme"/>
nuxt-link genellikle iç linkler için kullanılır, dış link normal a dır. <n-link/> nuxt-link ile aynıdır, en çok bu kullanılır, 
<n-link no-prefetch /> ön yükleme olmasın demektir, bütün ön yüklemelri nuxt.config.js den de yapabiliriz, bütün app a ilşikin ayarlar nuxt.config.js den yapılır, mesela nuxt.config de prefetch i kapattık diyelim, bu kullanım ile sadece burada açabiliriz vs. 

burada veya başka aşamalarda problem ıkması halinde ctrl + c ile server ı durdurup npm run dev ile manuel olarak başlatmak aorunu çözebilir

